name: deploy

on:
  push:
    branches: [main] # Workflow is triggered when you push to these branches
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-18.04 # ex) EC2 instance

    strategy:
      matrix:
        node-version: [14.21.3]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # To do list after with repository code in CI server
    steps:
      # Step to enable workflow to approach to our repository
      - name: Checkout source code.
        uses: actions/checkout@v2

      # Set specific Node version
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Npm -v
        run: npm -v

      - name: create env file
        working-directory: ./
        run: |
          pwd
          touch .env
          echo NODE_SERVER_PORT=${{ secrets.NODE_SERVER_PORT }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo HTTPS_PORT=${{ secrets.HTTPS_PORT }} >> .env
          echo HTTP_PORT=${{ secrets.HTTP_PORT }} >> .env
          echo RDS_HOST=${{ secrets.RDS_HOST }} >> .env
          echo RDS_PORT=${{ secrets.RDS_PORT }} >> .env
          echo RDS_USERNAME=${{ secrets.RDS_USERNAME }} >> .env
          echo RDS_PASSWORD=${{ secrets.RDS_PASSWORD }} >> .env
          echo RDS_DATABASE_NAME=${{ secrets.RDS_DATABASE_NAME }} >> .env
          cat .env
        
        # To install npm dependencies
      - name: Install Dependencies
        run: npm install

      # To build NestJS Application
      - name: Build a Nest.js Application
        name: npm run build
        shell: bash

      # Zip our Repository
      - name: zip file
        run: zip -r pyramid.zip ./dist ./scripts ./src ./test ./.env ./appspec.yml ./nest-cli.json ./package-lock.json ./package.json ./tsconfig.build.json ./tsconfig.json ./ -x "node_modules/*" "coverage/*" "*.git*"

      # Tell AWS that we are qualified person for this with IAM User
      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 

      # Upload zip file you created above to S3
      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./pyramid.zip s3://pyramid-build/deploy/

      # Request codeDeploy to create deployment
      # AWS CodeDeploy 실행 시 가장 아랫줄 지정한 곳에 압축 파일 푼 뒤, CodeDeploy와 연결된 EC2 인스턴스에 배포
      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name pyramid-test-codedeploy
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name GROUP
          --s3-location bucket=pyramid-build,bundleType=zip,key=deploy/pyramid.zip

      # 배포 완료 후 after-deploy.sh 저장한 명령어들이 실행되면서 서버 자동 재시작
